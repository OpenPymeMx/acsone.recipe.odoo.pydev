.. contents::

- Code repository: http://github.com/acsone/acsone.recipe.odoo.pydev
- Report bugs at http://github.com/acsone/acsone.recipe.odoo.pydev/issues


What is acsone.recipe.odoo.pydev
==================================

This recipe for `Buildout <https://github.com/buildout/buildout>`_ is
an extension to the fully featured recipe developed by Anybox
`anybox.recipe.openerp
<http://pythonhosted.org/anybox.recipe.openerp>`_.

It allow you to generate an Eclipse PyDev Project config with PYTHONPATH 
pointing to some eggs and their dependencies required to develop, run
and debug your `Odoo <https://www.odoo.com>`_ server.

In addition to the startup scripts and configuration file generated by
`anybox.recipe.openerp
<http://pythonhosted.org/anybox.recipe.openerp>`_., this zc.buildout recipe
generates the two files that define a PyDev Project:

 * .project 
 * .pydevproject.

While eggs and their dependencies are declared as external libraries, 
the server and its addons are declared as source folders. In the same time,
the recipe uses in background the `collective.recipe.omelette 
<https://pypi.python.org/pypi/collective.recipe.omelette>`_ recipe to build
a unified directory structure of declared addons, symlinking to the actual 
contents, in order to allow proper pep8 check and auto completion. 
This directory structure is also declared as external dependency to avoid 
confusion between source folder and the unified directory structure.

It's a know issue that when same addons are both in the PYTHONPATH and 
addons_path (it's the case with the generated project definition), 
it's not possible to start the server due to import errors. To avoid
this problem, the recipe adds to the generated scripts , specific code 
to remove parts of sys.path that are also in addons_path.

Usage
=====

Since the recipe is an extension to `anybox.recipe.openerp
<http://pythonhosted.org/anybox.recipe.openerp>`_, the first step, if not done,
is to add your `anybox.recipe.openerp
<http://pythonhosted.org/anybox.recipe.openerp>`_, configuration to ``buildout.cfg`` 
and include it in ``${buildout:parts}``. An example::

    [buildout]
    ...
    parts = ... openerp

    [openerp]
    recipe = anybox.recipe.openerp[bzr]:server
    version = bzr lp:opcb-server/7.0  openerp last:1 bzr-init=stacked-branch
    addons = bzr lp:ocb-addons/7.0  addons last:1 bzr-init=stacked-branch
             bzr lp:ocb-web/7.0 addons-web last:1 subdir=addons bzr-init=stacked-branch
             bzr lp:server-env-tools addons-server-env-tools last:1 bzr-init=stacked-branch
    ....


A good practice is to use the inheritance mechanism of buildout to define your
development environment in an other file ``devel.cfg``::

    [buildout]
    extends = buildout.cfg
    parts = ... pydevproject

    [pydevproject]
    <= openerp
    recipe = acsone.recipe.odoo.pydev
    name = my_project_name
    python-version = python 2.7
    python-interpreter = Default
    eggs += any_additional_egg_you_want

Supported options
=================
These match the options of a PyDev Project.

name
  The project name. This is just for Eclipse and can be anything you want.
python-version
  The combination of interpreter and grammar version. E.g. *python 2.7* 
  (default is *python 2.7*)
python-interpreter
  The interpreter name, as configured in the the Eclipse Preferences for PyDev. 
  Usually *Default* is fine.  (default is *Default*)
